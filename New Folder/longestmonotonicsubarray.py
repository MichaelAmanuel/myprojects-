# -*- coding: utf-8 -*-
"""longestMonotonicSubarray

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19590nUeYrPa7so5J0zjWB7OKAA9eMkyU
"""

class Solution(object):
    def longestMonotonicSubarray(self, nums):
        if not nums:
            return 0

        inc, dec = 1, 1  # Initialize increasing and decreasing lengths
        max_length = 1  # At least one element is always a valid subarray

        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:  # Increasing sequence
                inc += 1
                dec = 1  # Reset decreasing count
            elif nums[i] < nums[i - 1]:  # Decreasing sequence
                dec += 1
                inc = 1  # Reset increasing count
            else:  # Reset both if numbers are equal
                inc, dec = 1, 1

            max_length = max(max_length, inc, dec)  # Update max length

        return max_length

# Example Test Cases
solution = Solution()
print(solution.longestMonotonicSubarray([1, 4, 3, 3, 2]))  # Output: 2
print(solution.longestMonotonicSubarray([3, 3, 3, 3]))  # Output: 1
print(solution.longestMonotonicSubarray([3, 2, 1]))  # Output: 3
print(solution.longestMonotonicSubarray([1, 2, 3, 4, 5]))  # Output: 5
print(solution.longestMonotonicSubarray([5, 4, 3, 2, 1]))  # Output: 5

class Solution(object):
    def check(self, nums):

      ni = min(nums)
      if nums[0] != ni:
        for i in range(nums.index(ni), len(nums)-1):
          if nums[i] > nums[i+1]:
            return False

        for i in range(nums.index(ni)):
          if nums[i - 1] > nums[i]:
            return False

      else:
        if nums[0] != nums[len(nums)-1]:
          for i in range(nums.index(ni), len(nums)-1):
            if nums[i] > nums[i+1]:
              return False
        else:
          for i in range(len(nums)-1):
            if nums[i - 1] > nums[i]:
              return False

      return True

solution = Solution()
nums = [6,10,6]
print(solution.check(nums))